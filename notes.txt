agora estou criando validações para cadastrar um produto 
- Image should be less than 1mb in size
- se não mandar algum dos campos preenchidos

PRECISO DE VALIDAÇÃO PARA PRODUCTS REPETIDOS (ex: não pode ter o mesmo nome)

O que é middleware? 
O middleware é como o garçom de um restaurante. Quando faço um pedido, o garçom leva esse pedido até a cozinha (que seria o servidor). A cozinha prepara o pedido e o garçom trás o prato até você (que seria o cliente). No mundo da tecnologia, o middleware atua como ponte entre diferentes sistemas, permitindo que eles se comuniquem e compartilhem informações. Ele pode ajudar a processar solicitações, enviar respostas, conectar diferentes tipos de software e muito mais. 

EX: middleware do userById (controllers/user.js)
1. Recebendo o pedido: quando uma solicitação chega com o ID de usuário, o middleware é acionado. O ID do usuário é passado como parâmetro
2. Levando o pedido para a cozinha: O middleware leva esse ID de usuário e faz uma consulta ao banco de dados (a cozinha) para encontrar o usuário correspondente usando User.findById(id).exec()
3. Verificando se o pedido pode ser atendido: Se o usuário não for encontrado (if (!user)), o middleware retorna um erro para o cliente, informando que o 'pedido' não pode ser atendido porque o usuário não foi encontrado 
4. Entregando o pedido ao cliente: Se o usuário for encontrado, o middleware adiciona o usuário à solicitação (req.profile = user) e passa o controle para o próximo middleware na linha (next()). Isso é semelhante ao garçom entregando o prato ao cliente 
5. Lidando com erros: Se ocorrer algum erro durante a busca do usuário no banco de dados (se o banco, por exemplo, não tiver acessível), o middleware captura esse erro e envia uma resposta de erro para o cliente

No padrão de arquitetura MVC (model-view-controller) o middleware geralmente reside na camada de controller. Aqui está o porque: 
- Model: esta camada lida com os dados e lógica de negócios. Ela interage com o banco de dados e realiza operações como buscar, inserir e atualizar dados
- View: esta é a camada de apresentação que lida com a interface do usuário. Exibe os dados ao usuário e também coleta a entrada do usuário 
- Controller: Esta camada atua como um intermediário entre a Model e a View. Ela processa as solicitações do usuário, interafge com a Model para buscar/atualizar os dados e, em seguida, envia os dados para a View para serem exibidos. O middleware, como o userById, se encaixa aqui porque ele está processando a solicitação do usuário (o ID do usuário, neste caso) e interagindo com a Model (para buscar o usuário do banco de dados) 
Porém, dependendo da complexidade do aplicativo, o middleware também pode ser organizado em sua própria camada separada 

Criei um middleware productById para ficar mais fácil encontrar um único produto e atualizar ou deletar. E assim também precisa criar uma rota para poder fazer isso.

Enviando produtos como queries 
Agora temos todos os middlewares e rotas de produto, mas como vamos retornar o produto para o frontEnd? Precisamos de um jeito flexível de retornar. Temos que retornar pensando em SELL e ARRIVAL. Essa é uma feature importante de qualquer aplicação ecommerce. Então os produtos mais vendidos vão ser retornados para o frontEnd como uma lista de mais populares. E alguns produtos são novos, acabaram de chegar (ARRIVAL) - e essa pode ser uma forma de exibir os produtos também, os mais novos. 
--------------------------------------------------------------------
HOOKS 
O state é um hook --> useState e useEffect 

Nós precisávamos usar class components pelos seguintes motivos: 
- para persistir dado no estado 
- para usar metodos de lifecycle
- para passar props para as classes de componentes funcionais 
Mas com os hooks, pode fazer tudo sem usar class components 

O state é pra mudar o estado 
o useEffect é pra não precisar mais escrever metodos de lifecycle

UseEffect é como uma instrução para o React fazer algo extra depois que seu componente é mostrando na tela. Se colocar uma coisa dentro do array, é pra executar o useEffect somente quando aquilo que está no array mudar. 

useEffect(() => {
  // Este código é executado sempre que o componente é mostrado ou atualizado
});

useEffect(() => {
  // Este código é executado uma vez quando o componente é mostrado
}, []);

useEffect(() => {
  // Este código é executado quando 'valor' muda
}, [valor]);

No React.js a renderização do lado do servidor, também conhecida como server-side-rendering (SSR), é uma técnica em que a renderização inicial da interface do usuário ocorre no servidor antes de ser enviada para o navegador. Isso é contrastado com a abordagem mais comum, chamada de client-side-rendering (CSR), onde a renderização acontece no navegador. A SSR tem implicações positivas para mecanismos de busca, como o Google, por alguns motivos: 
  1. SEO (Otimização para mecanismos de busca): Os motores de buscar, incluindo Google, consegue indexar o conteúdo renderizado no servidor com mais facilidade do que o conteúdo gerado dinamicamente no navegador. Isso melhora a capacidade do mecanismo de busca entender e indexar o conteúdo da sua aplicação 
  2. Desempenho inicial: 
    - Tempo de carregamento inicial: Com a SSR, o HTML é gerado no servidor e enviado ao nagevador, o que pode resultar em um tempo de carregamento inicial mais rápido, especialmente em dispositivos com largura de banda limitada ou em conexões mais lentas 
    - Conteúdo visível mais rápido: O conteúdo visível pode ser enviado diretamente ao navegador, permitindo uma visualização mais rápida para o usuário enquanto outros scripts e recursos estão sendo carregados 
  3. Compatibilidade com redes sociais e scrapers 
    - Pré visualização em redes sociais: Muitas redes sociais e plataformas de compartilhamento de links dependem de rastreadores que analisam o HTML da página. SSR facilita a criação de pré-visualizações ricas e preciosas
    - Melhor interação com Bots de mecanismos de busca: bots de mecanismos de busca têm uma experiencia mais eficiente e completa ao rastrear o conteúdo SSR

Desvantagem: Aumento na carga do servidor devido à renderização. É importate analisar caso a caso e ver qual a melhor opção

Quando instala o React, coisas que podem ser removidas: 
- App.css 
- App.test.js
- index.css
- logo.svg
- serviceWorker.js
(Pode ficar só com o App.js e index.js)

O App.js fica assim 
const App = () => (<div>Oi</div>);

export default App;

index.js assim 
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



